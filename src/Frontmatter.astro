---
import { logger } from '@it-astro:logger:astro-frontmatter-components';
import type { SchemaMeta } from './index';
import { getRegistry } from './index';

type Props = {
	blocks?: SchemaMeta[];
};
const { blocks } = Astro.props;

if (blocks == null) {
	logger.warn('Provided data is null');
}

const registry = getRegistry();
const builtSections =
	blocks != null
		? blocks
				.map((props) => {
					const section = registry[props.type];
					if (section == null) return;
					return {
						path: section.path,
						props,
					};
				})
				.filter((data) => data != null)
		: [];
---

{
	builtSections.map(async (data) => {
		const Component = (/* @vite-ignore */ await import(data.path)).default;
		return <Component {...data.props} />;
	})
}
